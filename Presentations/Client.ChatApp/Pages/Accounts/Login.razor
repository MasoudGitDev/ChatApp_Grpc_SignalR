@page "/Login"

@using Client.ChatApp.Services
@using Mapster
@using Microsoft.AspNetCore.Components.Authorization
@using Server.ChatApp.Protos
@using Shared.Server.Models
@using Shared.Server.Models.Results
@using System.Net.Http.Headers
@inject AccountRPCs.AccountRPCsClient _accountService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navManager
@inject HttpClient _httpClient

<div class="account_container">
    @if(Errors.Count > 0) {
        <div class="section-errors center" style="visibility:@(Errors.Count > 0 ? "visible" : "hidden")">
            <div class="mb-3" style="width:100%;height40px; border-bottom:1px solid rgba(80,80,80,.3);">
                <button class="btn btn-close" @onclick="CloseFormErrors"></button>
            </div>
            @foreach(var err in Errors) {

                <div class="form-error center">
                    <div class="err-logo center"><p>*</p></div>
                    <div class="err-title center">@err.Code</div><br />
                    <div class="err-info center">@err.Message</div>
                </div>
            }               
         </div>    
    }
    
    <div class="section-form center">
        <div class="form-container size-all">
            <EditForm Model="_currentModel" class="edit_form size-all" OnValidSubmit="OnSubmitAsync">
                <div class="form-group mt-1">
                    <label class="form-label">ایمیل یا نام کاربری</label>
                    <input class="form-control" @bind="_currentModel.LoginName" />
                </div>
                <div class="form-group  mt-3">
                    <label class="form-label">رمز عبور</label>
                    <input class="form-control" @bind="_currentModel.Password" />
                </div>
                <div class="buttons mt-3">
                    <button class="btn btn-outline-success">ورود</button>
                    <button type="button" class="btn btn-outline-info" @onclick="GoToSignUpPage">ثبت نام</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    private LoginDto _currentModel = new();
    private List<CodeMessage> Errors = [];

    private void GoToSignUpPage() => _navManager.NavigateTo("/SignUp");
    private void CloseFormErrors() {
        Errors.Clear();
        _currentModel = new();
    }

    private async Task OnSubmitAsync() {
        Errors.Clear();
        var _authProvider = (AuthStateProvider)_authenticationStateProvider;
        // remove last state if exist
        await _authProvider.SetStateAsync();
        // login validation        
        var response = (await _accountService.LoginAsync(_currentModel.Adapt<LoginReq>()));
        Errors.AddRange(response.Errors.Adapt<List<CodeMessage>>());

        Console.WriteLine(new { 
            isValid = response.IsValid , 
            token = response.AccessToken ,
            errors =  string.Join(",",response.Errors) ,
            convertedErrors = string.Join("," , Errors)
        });
        if(Errors.Count <= 0 && response.IsValid) {
            // set new state
            await _authProvider.SetStateAsync(response.AccessToken);
            _navManager.NavigateTo("/");
            return;
        }
     
    }
}
