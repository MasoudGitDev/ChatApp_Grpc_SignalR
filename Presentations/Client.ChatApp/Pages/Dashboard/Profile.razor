@page "/Profile/{profileId}"

@inject NavigationManager _navManager;
@inject ContactRPCs.ContactRPCsClient _contactService

<AuthorizeView Context="authContext">
<Authorized>
        <div class="container">            
            <div class="err-card @(IsAnyError)">
                @foreach(var err in Errors) {
                    <div class="err-info" @onclick="() =>CloseNotification(err)">
                        <div class="err-body">
                            <div style="font:14px;">@err.Code</div>
                            <div style="font:12px;">@err.Description</div>
                        </div>
                        <div class="err-control center">
                            <button class="err-btn btn-close"></button>
                        </div>
                    </div>
                }
            </div>
            <div class="profile">
                <div class="info">
                    <div class="logo"></div>
                    <div class="user-data">
                        <div>@ProfileId</div>
                    </div>
                </div>
                <div class="dropdown-divider"></div>
                <div class="description">
                    <p>Hi There ! </p>
                    <p>I am a web developer.</p>
                    <p>my ... are :</p>
                    <ul>
                        <li>C#</li>
                        <li>Asp.net Core</li>
                    </ul>
                </div>
                <div class="dropdown-divider"></div>
                <div class="controls">
                    <button class="btn btn-outline-info" >@ButtonName</button>
                </div>
            </div>
        </div>
</Authorized>
<NotAuthorized>Please Login/Signup </NotAuthorized>

</AuthorizeView>

@code {


    [Parameter]
    public string ProfileId { get; set; } = null!;

    private List<ErrorInfo> Errors = [];
    private string IsAnyError = "";
    private bool IsValidUserName = true;
    private bool ExistInContacts = false;
    private string ButtonName => ExistInContacts ?  "Dialog" : "Request";


    private void CloseNotification(ErrorInfo model) {
        Errors.Remove(model);
        if(Errors.Count <= 0) {
            IsAnyError = "";
        }
    }

    protected override async Task OnInitializedAsync() {
        try {              
            var result = await _contactService.IsInContactsAsync(new ContactMsg() { ProfileId = ProfileId });
            foreach(var message in result.Messages) {
                if(message.Code == "Invalid-ProfileId") {
                    IsValidUserName = false;
                }                
                Errors.Add(message);
            }      
            IsAnyError = Errors.Count() > 0 ? "" : "hidden";
        }
        catch(Exception ex) {
            Console.WriteLine("OnInitializedAsync : " +ex.Message);
            Errors.Add(new ErrorInfo() { Code = "Loading-Error" , Description = "The page not load Completely." });
        }
    }    
}
